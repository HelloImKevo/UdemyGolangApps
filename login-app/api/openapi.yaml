openapi: 3.0.3
info:
  title: Login App API
  description: |
    A comprehensive authentication API demonstrating enterprise-grade Go development patterns.
    
    This API provides user registration, authentication, and profile management capabilities
    with JWT-based security.
  version: 1.0.0
  contact:
    name: UdemyGolangApps
    url: https://github.com/HelloImKevo/UdemyGolangApps
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://your-domain.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with the provided information
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              first_name: "John"
              last_name: "Doe"
              username: "johndoe"
              email: "john.doe@example.com"
              password: "securepassword123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      description: Authenticates a user with email and password, returns JWT token
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john.doe@example.com"
              password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logs out the current user (client-side token removal)
      operationId: logoutUser
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/profile:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Returns the current user's profile information
      operationId: getUserProfile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    RegisterRequest:
      type: object
      required:
        - first_name
        - last_name
        - username
        - email
        - password
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
        last_name:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          description: Unique username (alphanumeric and underscore only)
        email:
          type: string
          format: email
          description: User's email address (must be unique)
        password:
          type: string
          minLength: 6
          description: User's password (minimum 6 characters)

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 6
          description: User's password

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT authentication token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            user:
              $ref: '#/components/schemas/UserInfo'
            expires_at:
              type: string
              format: date-time
              description: Token expiration timestamp
              example: "2024-01-01T12:00:00Z"

    UserInfo:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        username:
          type: string
          description: User's username
          example: "johndoe"
        first_name:
          type: string
          description: User's first name
          example: "John"
        last_name:
          type: string
          description: User's last name
          example: "Doe"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-01T10:00:00Z"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          description: Optional response data
          nullable: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type/code
          example: "validation_error"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid request data"
        code:
          type: integer
          description: HTTP status code
          example: 400

  examples:
    RegistrationExample:
      value:
        first_name: "Jane"
        last_name: "Smith"
        username: "janesmith"
        email: "jane.smith@example.com"
        password: "mySecurePassword456"

    LoginExample:
      value:
        email: "jane.smith@example.com"
        password: "mySecurePassword456"

    UserProfileExample:
      value:
        id: "987fcdeb-51a2-43d1-9f4e-123456789abc"
        email: "jane.smith@example.com"
        username: "janesmith"
        first_name: "Jane"
        last_name: "Smith"
        created_at: "2024-01-01T09:30:00Z"

tags:
  - name: Authentication
    description: User authentication operations
  - name: User Profile
    description: User profile management operations

x-tag-groups:
  - name: Public Endpoints
    tags:
      - Authentication
  - name: Protected Endpoints
    tags:
      - User Profile
